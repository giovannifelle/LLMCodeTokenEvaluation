```crystal
fn fibonacci(n : Int) : UInt32 =
    n <= 1 ? n : fibonacci_auxiliary(0b0..<((UInt64HandleOfsBitArray`maxValue + 2).toInteger), 1, (self & ~mask)) # mask is the binary representation of "n - bit" number in a UINT32
                                                                                                                    ^     ^^   ^^ ^     self = n.bitPositionInByte(0b) which means 'binary position' here... this may not be what you were expecting, but it makes sense given that we are talking about binary numbers and how they work! ❤️🙂
                                                                                                                    ^     ^^   ++++ ++++ self = n.bitPositionInByte(0b) which means 'binary position' here... this may not be what you were expecting, but it makes sense given that we are talking about binary numbers and how they work! ❤️🙂
# Including comments for understanding code execution flow #  ^   ^^        . -> := , <..< >.~ (UInt64HandleOfsBitArray`maxValue + 2).toInteger) // range from smallest to largest number in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^      ^^     . -> := , <..< >.~ ((UInt64HandleOfsBitArray`maxValue + 1).toInteger), n] // bitmask of "n-bit" in UINT32, 0b is binary
# ^     +++ +++++ +++|   < .. <<  |  & ~ |  ~ and mask   ^